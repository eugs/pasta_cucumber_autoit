ПОДКЛЮЧЕНИЕ НОДЫ

Config: Launch method : Launch agent via Java Web Start
поставить Labels по которым будет привязываться джоба к этой ноде

Для подключения зайти в Jenkins > Nodes > Nodename
скачать slave.jar, положить его в папку, где будут лежать данные ноды (воркспейс, в т.ч.пуллы с гита и тп)
обычно это c:/data/slave
открыть cmd, перейти в папку, вставить строчку, которую предложит нода
вроде такой:
java -jar slave.jar -jnlpUrl http://hostip:8080/computer/new/slave-agent.jnlp -secret b7ded78e8047d6a2f412ece9ca2fa04d7d6fdc9e1a41176bd1f0fc4e9c4d5ee7
(следить за адресом хоста и портом!)

нажать ENTER, в консоли должно появиться Connected

Если не получается, то надо проверить, не подконнекчена ли нода к другому компьютеру
Когда в веб-уи жать Disconnect, нода автоматически коннектится по таймауту, тут либо ловить момент, когда мы успеем законнектиться между таймаутами, либо на той машине, где сейчас развернута нода, закрыть командную строку

Веб-драйвер будет открывать браузер и исполняться НА ТОЙ МАШИНЕ, на которой развернута нода.
Не имеет значения, на каком хосте лежит дженкинс, мы можем запустить с одной машины дженкинс второй машины, который будет обращаться к ноде, развернутой на третьей.
Следить за расположением гита на машине, по умолчанию нода ищет его в Program Files.
При желании можно изменить поиск гита в настройках ноды

НАСТРОЙКИ ДЖОБЫ

Привязка к ноде:
General > Restrict where this project can be run
Указать лейблы

Привязка к NodeJS:
Build Environment > Provide Node & npm bin/ folder to PATH
Выбрать, где лежит ноджс

Для запуска с кред-плагином (для передачи креденшлов в зашифрованном виде)
Use secret text(s) or file(s)
Bindings > Add > Username and password (separated)
Названы переменные так, как мы будем вытягивать их в коде
добавить креды и сохранить в дженкинсе

БАТЧ-КОМАНДЫ ДЛЯ ЗАПУСКА:
Build > Execute Windows batch command

что-то вроде
npm install  && start webdriver-manager start && cd test\support\autoit\ && start AutoItDriverServer.bat && npm install gulp -g && gulp run
(переходы к батнику AutoItDriverServer для того, чтоб запустить питон питон-сервер на машине исполнения для хэндлинга автоит-команд)

для того, чтоб вебдрайвер-менеджер стартовал в отдельной консоли, не блокируя выполнения билда нужно добавить в начале команды start

батник для старта автоит-драйвер сервера может быть другим (об этом ниже)


АВТОИТ-ДРАЙВЕР
Для того, чтоб хэндлить ui винды, нам нужен автоит
Мы можем сделать бинарники через саму программу автоита, скомпилить их и запускать их вручную в коде (через exec)

а можем настроить использование автоита в стиле обычного веб-драйвера
Для этого надо скачать AutoitDriverServer
На данный момент он написан на питоне, поэтому необходимо сперва настроить окружение, установив питон и тп
(инструкциия по установке должна быть в архиве с сервером)

Когда сервер настроен и запущен, он ловит и исполняет автоит-команды.

ВАЖНО: автоит-сервер выполняет команды винды НА ТОЙ МАШИНЕ, НА КОТОРОЙ ОН РАЗВЕРНУТ
то есть если в коде будет указан адрес, отличный от того, где крутится веб-драйвер, то все команды автоита будут уходить туда, а на тест-машине ничего не будет происходить

Настройка ад-сервера для JS:

в стиле обычного веб-драйвера, с указанием адреса машины
  var webdriver = require('selenium-webdriver');
  var ad = new webdriver.Builder().usingServer(AUTOIT_IP).withCapabilities({'browserName': 'AutoIt' }).build();

AUTOIT_IP - адрес машины, на которой крутятся тесты

после этого можно использовать ad как обычный wd

ad.switchTo().window("Authentication Required");
ad.actions().sendKeys("some text").perform();
ad.actions().sendKeys("{TAB}").perform();
ad.actions().sendKeys("{ENTER}").perform();


ПЕРЕДАЧА КРЕДОВ В ПРОГРАММУ:
Через Jenkins Credentials plugin
Настраиваем bindings (см.выше)
вытягиваем в коде через переменные окружения
var user = process.env.MY_USER;
var pass = process.env.MY_PASS;

MY_USER, MY_PASS сетаются в дженкинсе


ПРОБЛЕМА ВИНДОВЫХ ОКНО НА УДАЛЁННОЙ МАШИНЕ

Судя по всему, автоит требует АКТИВНЫЙ ЭКРАН для манипуляций с виндовым ui, поэтому запуск через RDP не сработает.
Как только мы выйдем или свернем ремот коннекшн, логины и любые другие автоит-манипуляции не будут проходить

Выходом может быть использование TightVNC

Это тул наподобие тимвьювера, можно подключиться к удаленной машине и управлять ей со своей (при этом на обеих машинах будет происходить одно и то же, все движения мыши, вводы с клавиатуы и тп).
Залогинившись, мы можем поставить билд на удалёнке (через дженкинс мы это можем сделать откуда угодно, хоть с нашей машины, хоть с третьей, подключившись к дженкинус через веб-уи)

После логина на удаленке сохраняется активная сессия.
Если мы разрываем соединение тайта, то сессия юзера на удаленке НЕ ПРЕКРАЩАЕТСЯ. Монитор остается активным (как если бы мы подошли к той машине, залогинились в неё с клавиатуры, а потом просто ушли)
Соответственно, все тесты гоняются прямо на экране машины, и виндовые окна успешно хэндлятся автоитом.

Для большей безопасности можно создать на удаленке тестового юзера (чтобы не оставлять свои креденшлы активными на машине) и гонять все тесты под ним.
